# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z39zgiTlK6_R9EaufsCRwYONpH5RPrvJ
"""

pip install pandas numpy seaborn scikit-learn matplotlib scipy

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import AgglomerativeClustering
from sklearn.mixture import GaussianMixture
from scipy.cluster.hierarchy import dendrogram, linkage

# Load the dataset
dataset_path = "enhanced_women_health_25_diseases.csv"
df = pd.read_csv("/content/enhanced_women_health_25_diseases.csv")

# Selecting relevant features for clustering
features = ["Age", "BMI", "BloodPressure", "PhysicalActivity", "ChronicDisease", "HealthcareAccess"]
X = df[features]

# Standardizing the data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Hierarchical Clustering
dendro = linkage(X_scaled, method='ward')
plt.figure(figsize=(10, 5))
dendrogram(dendro)
plt.title("Dendrogram for Hierarchical Clustering")
plt.xlabel("Data Points")
plt.ylabel("Euclidean Distances")
plt.show()

# Applying Agglomerative Clustering
n_clusters = 4  # Number of clusters based on the dendrogram
hc = AgglomerativeClustering(n_clusters=n_clusters, linkage='ward')
df['Cluster_HC'] = hc.fit_predict(X_scaled)

# Applying Gaussian Mixture Model (GMM)
gmm = GaussianMixture(n_components=n_clusters, random_state=42)
df['Cluster_GMM'] = gmm.fit_predict(X_scaled)

# Mapping clusters to personalized recommendations
def generate_recommendation(cluster):
    recommendations = {
        0: "Increase physical activity, balanced diet, and regular screenings for diabetes.",
        1: "Monitor blood pressure, reduce sodium intake, and maintain hydration.",
        2: "Regular cardiovascular check-ups, low-fat diet, and stress management.",
        3: "Vitamin and mineral supplements, regular mental health counseling, and healthy lifestyle habits."
    }
    return recommendations.get(cluster, "General wellness check-ups and preventive care recommended.")

df['Health_Recommendation'] = df['Cluster_GMM'].apply(generate_recommendation)

# Display some results
print(df[['Age', 'BMI', 'BloodPressure', 'Cluster_GMM', 'Health_Recommendation']].head())

# Save results
df.to_csv("women_health_clusters_recommendations.csv", index=False)

print("Analysis Complete. Recommendations saved in 'women_health_clusters_recommendations.csv'")